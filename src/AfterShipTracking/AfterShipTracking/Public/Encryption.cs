/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
using System;
using System.Security.Cryptography;
using System.Text;

namespace AfterShipTracking
{
    public class Encryption
    {
        public static string MD5Encode(string input)
        {
            using MD5 md5 = MD5.Create();
            // Convert the input string to a byte array and compute the hash
            byte[] inputBytes = Encoding.UTF8.GetBytes(input);
            byte[] hashBytes = md5.ComputeHash(inputBytes);

            // Convert the byte array to a hexadecimal string
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < hashBytes.Length; i++)
            {
                sb.Append(hashBytes[i].ToString("X2"));
            }
            return sb.ToString();
        }

        public static string HmacSha256Encrypt(string signString, string secretKey)
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(secretKey);
            byte[] messageBytes = Encoding.UTF8.GetBytes(signString);

            using (HMACSHA256 hmac = new HMACSHA256(keyBytes))
            {
                byte[] hashBytes = hmac.ComputeHash(messageBytes);
                return Convert.ToBase64String(hashBytes);
            }
        }

        public static string RsaPssSha256Encrypt(string data, string privateKeyPem)
        {
            byte[] dataBytes = Encoding.UTF8.GetBytes(data);

            using (var rsa = RSA.Create())
            {
                rsa.ImportFromPem(privateKeyPem);

                // sign data with SHA256
                byte[] signature = rsa.SignData(
                    dataBytes,
                    HashAlgorithmName.SHA256,
                    RSASignaturePadding.Pss
                );

                // convert to Base64 string
                string base64Signature = Convert.ToBase64String(signature);

                return base64Signature;
            }
        }
    }
}
