/*
 * This code was auto generated by AfterShip SDK Generator.
 * Do not edit the class manually.
 */
using System.Net;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace AfterShipTracking
{
    public class BaseResourceService
    {
        private static JsonSerializerSettings settings = new JsonSerializerSettings
        {
            DateParseHandling = DateParseHandling.None,
            DateTimeZoneHandling = DateTimeZoneHandling.RoundtripKind
        };

        public static T ProcessResponse<T>(Response response)
        {
            if (response.StatusCode != HttpStatusCode.OK)
            {
                throw BuildAfterShipException(response);
            }

            T obj;
            try
            {
                obj = FromJson<T>(response.Content);
            }
            catch (Newtonsoft.Json.JsonException)
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.INVALID_JSON,
                    "Invalid response content:" + response.Content
                );
            }

            return obj;
        }

        public static T ProcessData<T>(Response response)
        {
            if (
                response.StatusCode < HttpStatusCode.OK
                || response.StatusCode >= HttpStatusCode.MultipleChoices
            )
            {
                throw BuildAfterShipException(response);
            }

            T obj;
            try
            {
                string dataJson = ToJson(FromJson<BaseResponse>(response.Content).Data);
                obj = FromJson<T>(dataJson);
            }
            catch (Newtonsoft.Json.JsonException)
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.INVALID_JSON,
                    "Invalid response content:" + response.Content
                );
            }

            return obj;
        }

        public static T ProcessResponseData<T, S>(Response response, IAdapter<T, S> adapter = null)
        {
            if (adapter == null)
            {
                return ProcessData<T>(response);
            }

            T obj;
            try
            {
                S source = ProcessData<S>(response);
                obj = Converter.Convert(source, adapter);
            }
            catch (Newtonsoft.Json.JsonException)
            {
                throw ErrorCode.GenSDKError(
                    ErrorCode.INVALID_JSON,
                    "Invalid response content:" + response.Content
                );
            }

            return obj;
        }

        private static AfterShipError BuildAfterShipException(Response response)
        {
            JObject jObject;
            try
            {
                jObject = JObject.Parse(response.Content);
            }
            catch (Newtonsoft.Json.JsonException)
            {
                return ErrorCode.GenSDKError(
                    ErrorCode.INVALID_JSON,
                    "Invalid response content:" + response.Content
                );
            }

            var meta = jObject["meta"];
            if (meta == null)
            {
                return ErrorCode.GenSDKError(
                    ErrorCode.INVALID_JSON,
                    "Invalid response content:" + response.Content
                );
            }

            int.TryParse(meta["code"]?.ToString(), out int code);
            var message = meta["message"]?.ToString();
            return ErrorCode.GenAPIError((int)response.StatusCode, code, response.Content, message);
        }

        public static string ToJson(object model)
        {
            try
            {
                return JsonConvert.SerializeObject(model, settings);
            }
            catch (JsonException e)
            {
                throw ErrorCode.GenSDKError(ErrorCode.INVALID_JSON, e.Message);
            }
        }

        public static T FromJson<T>(string value)
        {
            try
            {
                return JsonConvert.DeserializeObject<T>(value, settings);
            }
            catch (JsonException e)
            {
                throw ErrorCode.GenSDKError(ErrorCode.INVALID_JSON, e.Message);
            }
        }
    }
}
